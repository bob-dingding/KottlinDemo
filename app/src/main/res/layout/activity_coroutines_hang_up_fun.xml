<?xml version="1.0" encoding="utf-8"?>
<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".Coroutines.CoroutinesHangUpFunActivity">

    <ScrollView
            android:layout_width="match_parent"
            android:layout_height="match_parent">

        <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:orientation="vertical">

            <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="使用 async 并发:在概念上，async 就类似于 launch。它启动了一个单独的协程，这是一个轻量级的线程并与其它所有的协程一起并发的工作。不同之处在于 launch 返回一个 Job 并且不附带任何结果值，而 async 返回一个 Deferred —— 一个轻量级的非阻塞 future， 这代表了一个将会在稍后提供结果的 promise。你可以使用 .await() 在一个延期的值上得到它的最终结果， 但是 Deferred 也是一个 Job，所以如果需要的话，你可以取消它" />
          <ImageView
                  android:layout_width="wrap_content"
                  android:layout_height="200dp"
              android:src="@mipmap/hangupfun_one"/>
            <TextView
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="async 可以通过将 start 参数设置为 CoroutineStart.LAZY 而变为惰性的。 在这个模式下，只有结果通过 await 获取的时候协程才会启动，或者在 Job 的 start 函数调用的时候"/>
            <ImageView
                    android:layout_width="wrap_content"
                    android:layout_height="150dp"
                    android:src="@mipmap/hangupfun_two"/>

            <ImageView
                    android:layout_width="wrap_content"
                    android:layout_height="230dp"
                    android:src="@mipmap/hangupfun_three"/>
            <ImageView
                    android:layout_width="wrap_content"
                    android:layout_height="200dp"
                    android:src="@mipmap/hangupfun_three"/>
            <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="取消始终通过协程的层次结构来进行传递,如果其中一个子协程（即 two）失败，第一个 async 以及等待中的父协程都会被取消"/>

            <ImageView
                    android:layout_width="wrap_content"
                    android:layout_height="200dp"
                    android:src="@mipmap/hangupfun_five"/>
        </LinearLayout>
    </ScrollView>
</android.support.constraint.ConstraintLayout>