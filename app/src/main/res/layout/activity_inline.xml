<?xml version="1.0" encoding="utf-8"?>
<android.support.constraint.ConstraintLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".classandobject.InlineActivity">


    <ScrollView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:layout_constraintLeft_toLeftOf="parent"
            app:layout_constraintRight_toRightOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            android:orientation="vertical" android:id="@+id/scrollView2">
        <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical">
            <TextView android:layout_width="wrap_content"
                      android:layout_height="wrap_content"
                      android:text="所有的基本类型都有一个与之对应的类，这些类称为包装器类。
对象包装器类是不可改变的，即一旦构造类包装器类，就不允许更改包装在其中的值。
同时，对象包装器类还是final，因此不能定义它们的子类。
\n自动装箱：可以直接将基本类型数据赋值给其对应的包装器类型.
自动装箱一定要类型严格匹配，包装器类型没有基本类型从小到大的转换
在赋值的地方，都可以发生自动拆箱与装箱
\n自动拆箱：和自动装箱的过程相反，可以将包装器类对象赋值给一个基本类型
在自动拆箱的过程中，赋值号左边是基本类型，因此自动拆箱可以类型不严格匹配"/>
            <TextView android:layout_width="wrap_content"
                      android:layout_height="wrap_content"
                      android:layout_marginTop="20dp"
                      android:text="有时候，业务逻辑需要围绕某种类型创建包装器。然而，由于额外的堆内存分配问题，它会引入运行时的性能开销.为了解决这类问题，Kotlin 引入了一种被称为 内联类 的特殊类，它通过在类的前面定义一个 inline 修饰符来声明
/n内联类必须含有唯一的一个属性在主构造函数中初始化。在运行时，将使用这个唯一属性来表示内联类的实例,如下:"/>
            <ImageView android:layout_width="match_parent"
                       android:layout_height="248dp"
                       android:src="@mipmap/inlineclass_one"/>
            <TextView android:layout_width="wrap_content"
                      android:layout_height="wrap_content"
                      android:text="在生成的代码中，Kotlin 编译器为每个内联类保留一个包装器。内联类的实例可以在运行时表示为包装器或者基础类型。
\n为了生成性能最优的代码，Kotlin 编译更倾向于使用基础类型而不是包装器。 然而，有时候使用包装器是必要的。一般来说，只要将内联类用作另一种类型，它们就会被装箱。
\n因为内联类既可以表示为基础类型有可以表示为包装器，引用相等对于内联类而言毫无意义，因此这也是被禁止的"/>
            <ImageView android:layout_width="match_parent"
                       android:layout_height="319dp"
                       android:src="@mipmap/inline_two"
                       android:layout_marginTop="20dp"/>
            <ImageView android:layout_width="match_parent"
                       android:layout_height="200dp"
                       android:layout_marginTop="20dp"
                       android:src="@mipmap/inline_three"/>
            <TextView android:layout_width="wrap_content"
                      android:layout_height="wrap_content"
                      android:text="内联类和类型别名的区别:
\n类型别名与其基础类型(以及具有相同基础类型的其他类型别名)是 赋值兼容 的，而内联类引入了一个真实的新类型，与类型别名正好相反，类型别名仅仅是为现有的类型取了个新的替代名称(别名)："/>
            <ImageView android:layout_width="wrap_content"
                       android:layout_height="200dp"
                       android:layout_marginTop="20dp"
                       android:src="@mipmap/inline_four"/>
            <ImageView android:layout_width="wrap_content"
                       android:layout_height="200dp"
                       android:layout_marginTop="20dp"
                       android:src="@mipmap/inline_five"/>
        </LinearLayout>
    </ScrollView>
</android.support.constraint.ConstraintLayout>