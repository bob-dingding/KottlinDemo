<?xml version="1.0" encoding="utf-8"?>
<android.support.constraint.ConstraintLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".list.SequenceActivity">
    <ScrollView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
        >
        <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="match_parent">
            <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="当一个处理Iterable包含多个步骤时，它们将急切地执行：每个处理步骤完成并返回其结果–中间集合。在此集合上执行以下步骤。反过来，序列的多步处理在可能的情况下会延迟执行：仅当请求整个处理链的结果时才进行实际计算。
\n操作执行的顺序也不同：Sequence对每个元素一个一个地执行所有处理步骤。而Iterable完成整个集合的每个步骤，然后继续进行下一步。
因此，这些序列可避免生成中间步骤的结果，从而提高了整个收集处理链的性能。但是，序列的延迟性质增加了一些开销，这些开销在处理较小的集合或进行更简单的计算时可能很重要。"/>
           <TextView
                   android:layout_width="wrap_content"
                   android:layout_height="wrap_content"
                   android:text="要创建序列，请调用sequenceOf()将元素列为参数的函数"/>
        </LinearLayout>
    </ScrollView>

</android.support.constraint.ConstraintLayout>